# Packages
from time import sleep
from unittest import TestCase

import werkzeug

from webapp.app import app
from webapp.decorators import rate_limit_with_backoff


class TestDecorators(TestCase):
    def test_rate_limit_with_backoff_blocks_requests(self):
        """
        Test that functions generated by rate_limit_with_backoff are rate
        limited and that they backoff when the rate limit is exceeded.
        """

        def fn():
            sleep(0.1)
            return True

        with app.test_request_context():
            # Limit to calls once every second
            rate_limited_fn = rate_limit_with_backoff(fn, (1, 1))

            # Should raise an exception
            with self.assertRaises(werkzeug.exceptions.TooManyRequests):
                while True:
                    rate_limited_fn()

    def test_rate_limit_with_backoff_allows_requests(self):
        """
        Test that functions generated by rate_limit_with_backoff are rate
        limited and that they backoff when the rate limit is exceeded.
        """

        def fn():
            sleep(0.1)
            return True

        with app.test_request_context():
            # Limit to calls once every second
            rate_limited_fn = rate_limit_with_backoff(fn, (1, 1))

            # Should not raise an exception
            for _ in range(3):
                sleep(1)
                rate_limited_fn()
