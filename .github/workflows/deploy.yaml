name: Pack and Deploy

on:
  push:
    branches:
      - main

env:
  CHARMCRAFT_ENABLE_EXPERIMENTAL_EXTENSIONS: true
  ROCKCRAFT_ENABLE_EXPERIMENTAL_EXTENSIONS: true

jobs:
  pack-charm:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup LXD
        uses: canonical/setup-lxd@main

      - name: Setup Charmcraft
        run: sudo snap install charmcraft --classic --channel=latest/edge

      - name: Pack charm
        run: |
          cd charm
          charmcraft pack -v --project-dir ./

      - name: Upload charm
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.CHARM_NAME }}-charm
          path: ./charm/*.charm

  pack-rock:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup LXD
        uses: canonical/setup-lxd@main

      - name: Setup Rockcraft
        run: sudo snap install rockcraft --classic --channel=latest/edge

      - name: Pack Rock
        run: rockcraft pack -v

      - name: Upload Rock
        uses: actions/upload-artifact@v4
        with:
          name: ${{ vars.CHARM_NAME }}-rock
          path: ./*.rock

  publish-image:
    runs-on: ubuntu-latest
    needs: pack-rock
    outputs:
      image_url: ${{ steps.set_image_url.outputs.image_url }}
    steps:
      - name: Get Rock
        uses: actions/download-artifact@v4
        with:
          name: ${{ vars.CHARM_NAME }}-rock

      - name: Set image URL
        id: set_image_url
        run: echo "image_url=ghcr.io/canonical/ubuntu.com:$(date +%s)-${GITHUB_SHA:0:7}" >> $GITHUB_OUTPUT

      - name: Push to GHCR
        run: skopeo --insecure-policy copy oci-archive:$(ls *.rock) docker://${{ steps.set_image_url.outputs.image_url }} --dest-creds "canonical:${{ secrets.GITHUB_TOKEN }}"

  deploy-staging:
    runs-on:
      [self-hosted, self-hosted-linux-amd64-jammy-private-endpoint-medium]
    needs: [pack-charm, publish-image]
    environment:
      name: staging
      url: https://staging.ubuntu.com
    steps:
      - name: Install Dependencies
        run: |
          sudo snap install juju --classic
          sudo snap install vault --classic

      - name: Download Charm Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ vars.CHARM_NAME }}-charm

      - name: Configure Vault and Juju
        env:
          VAULT_ADDR: "https://vault.admin.canonical.com:8200"
          VAULT_ROLE_ID: ${{ secrets.VAULT_APPROLE_ROLE_ID }}
          VAULT_SECRET_ID: ${{ secrets.VAULT_APPROLE_SECRET_ID }}
        run: |
          set -e
          export CONTROLLER_NAME=${{ vars.JUJU_CONTROLLER_NAME }}
          export MODEL_NAME=${{ vars.JUJU_MODEL_NAME }}
          export VAULT_SECRET_PATH_ROLE=secret/prodstack6/roles/${MODEL_NAME}
          export VAULT_SECRET_PATH_COMMON=secret/prodstack6/juju/common
          export VAULT_TOKEN=$(vault write -f -field=token auth/approle/login role_id="$VAULT_ROLE_ID" secret_id="$VAULT_SECRET_ID") 
          mkdir -p ~/.local/share/juju
          vault read -field=controller_config "${VAULT_SECRET_PATH_COMMON}/controllers/${CONTROLLER_NAME}" | base64 -d > ~/.local/share/juju/controllers.yaml
          USERNAME=$(vault read -field=username "${VAULT_SECRET_PATH_ROLE}/juju")
          PASSWORD=$(vault read -field=password "${VAULT_SECRET_PATH_ROLE}/juju")
          printf "controllers:\n  %s:\n    user: %s\n    password: %s\n" "$CONTROLLER_NAME" "$USERNAME" "$PASSWORD" > ~/.local/share/juju/accounts.yaml

      - name: Deploy Application
        run: |
          export JUJU_MODEL=admin/${{ vars.JUJU_MODEL_NAME }}
          export CHARM_NAME=${{ vars.CHARM_NAME }}

          if juju status --color --relations | grep -q "^$CHARM_NAME\\s"; then
            echo "Application '$CHARM_NAME' exists. Running juju refresh..."
            juju refresh $CHARM_NAME --path ./*.charm --resource flask-app-image=${{ needs.publish-image.outputs.image_url }}
          else
            echo "Application '$CHARM_NAME' not found. Running juju deploy..."
            juju deploy ./*.charm $CHARM_NAME --resource flask-app-image=${{ needs.publish-image.outputs.image_url }}
          fi
          juju wait-for application $CHARM_NAME --query="name=='$CHARM_NAME' && (status=='active' || status=='idle')"

  deploy-production:
    runs-on:
      [self-hosted, self-hosted-linux-amd64-jammy-private-endpoint-medium]
    needs: [pack-charm, publish-image]
    environment:
      name: production
      url: https://ubuntu.com
    steps:
      - name: Install Dependencies
        run: |
          sudo snap install juju --classic
          sudo snap install vault --classic

      - name: Download Charm Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ vars.CHARM_NAME }}-charm

      - name: Configure Vault and Juju
        env:
          VAULT_ADDR: "https://vault.admin.canonical.com:8200"
          VAULT_ROLE_ID: ${{ secrets.VAULT_APPROLE_ROLE_ID }}
          VAULT_SECRET_ID: ${{ secrets.VAULT_APPROLE_SECRET_ID }}
        run: |
          set -e
          export CONTROLLER_NAME=${{ vars.JUJU_CONTROLLER_NAME }}
          export MODEL_NAME=${{ vars.JUJU_MODEL_NAME }}
          export VAULT_SECRET_PATH_ROLE=secret/prodstack6/roles/${MODEL_NAME}
          export VAULT_SECRET_PATH_COMMON=secret/prodstack6/juju/common
          export VAULT_TOKEN=$(vault write -f -field=token auth/approle/login role_id="$VAULT_ROLE_ID" secret_id="$VAULT_SECRET_ID")
          mkdir -p ~/.local/share/juju
          vault read -field=controller_config "${VAULT_SECRET_PATH_COMMON}/controllers/${CONTROLLER_NAME}" | base64 -d > ~/.local/share/juju/controllers.yaml
          USERNAME=$(vault read -field=username "${VAULT_SECRET_PATH_ROLE}/juju")
          PASSWORD=$(vault read -field=password "${VAULT_SECRET_PATH_ROLE}/juju")
          printf "controllers:\n  %s:\n    user: %s\n    password: %s\n" "$CONTROLLER_NAME" "$USERNAME" "$PASSWORD" > ~/.local/share/juju/accounts.yaml

      - name: Deploy Application
        run: |
          export JUJU_MODEL=admin/${{ vars.JUJU_MODEL_NAME }}
          export CHARM_NAME=${{ vars.CHARM_NAME }}

          if juju status --color --relations | grep -q "^$CHARM_NAME\\s"; then
            echo "Application '$CHARM_NAME' exists. Running juju refresh..."
            juju refresh $CHARM_NAME --path ./*.charm --resource flask-app-image=${{ needs.publish-image.outputs.image_url }}
          else
            echo "Application '$CHARM_NAME' not found. Running juju deploy..."
            juju deploy ./*.charm $CHARM_NAME --resource flask-app-image=${{ needs.publish-image.outputs.image_url }}
          fi
          juju wait-for application $CHARM_NAME --query="name=='$CHARM_NAME' && (status=='active' || status=='idle')"
